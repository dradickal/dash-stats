# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Dash {
  id: ID!
  startTime: DateTime!
  endTime: DateTime!
  zone: Zone
  dashTime: Decimal!
  activeTime: Decimal!
  driveTime: Decimal
  earningsTotal: Decimal
  earningsTotalFromApp: Decimal
  earningFromBasePay: Decimal
  earningsFromAppTips: Decimal
  earningsFromCashTips: Decimal
}

scalar Decimal

input DashWhereUniqueInput {
  id: ID
}

input DashWhereInput {
  AND: [DashWhereInput!]
  OR: [DashWhereInput!]
  NOT: [DashWhereInput!]
  id: IDFilter
  startTime: DateTimeFilter
  endTime: DateTimeFilter
  zone: ZoneWhereInput
  dashTime: DecimalFilter
  activeTime: DecimalFilter
  driveTime: DecimalNullableFilter
  earningsTotal: DecimalNullableFilter
  earningsTotalFromApp: DecimalNullableFilter
  earningFromBasePay: DecimalFilter
  earningsFromAppTips: DecimalFilter
  earningsFromCashTips: DecimalNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalFilter
}

input DecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalNullableFilter
}

input DashOrderByInput {
  id: OrderDirection
  startTime: OrderDirection
  endTime: OrderDirection
  dashTime: OrderDirection
  activeTime: OrderDirection
  driveTime: OrderDirection
  earningsTotal: OrderDirection
  earningsTotalFromApp: OrderDirection
  earningFromBasePay: OrderDirection
  earningsFromAppTips: OrderDirection
  earningsFromCashTips: OrderDirection
}

input DashUpdateInput {
  startTime: DateTime
  endTime: DateTime
  zone: ZoneRelateToOneForUpdateInput
  dashTime: Decimal
  activeTime: Decimal
  driveTime: Decimal
  earningsTotal: Decimal
  earningsTotalFromApp: Decimal
  earningFromBasePay: Decimal
  earningsFromAppTips: Decimal
  earningsFromCashTips: Decimal
}

input ZoneRelateToOneForUpdateInput {
  create: ZoneCreateInput
  connect: ZoneWhereUniqueInput
  disconnect: Boolean
}

input DashUpdateArgs {
  where: DashWhereUniqueInput!
  data: DashUpdateInput!
}

input DashCreateInput {
  startTime: DateTime!
  endTime: DateTime!
  zone: ZoneRelateToOneForCreateInput
  dashTime: Decimal!
  activeTime: Decimal!
  driveTime: Decimal
  earningsTotal: Decimal
  earningsTotalFromApp: Decimal
  earningFromBasePay: Decimal
  earningsFromAppTips: Decimal
  earningsFromCashTips: Decimal
}

input ZoneRelateToOneForCreateInput {
  create: ZoneCreateInput
  connect: ZoneWhereUniqueInput
}

type Zone {
  id: ID!
  name: String
  dashes(where: DashWhereInput! = {}, orderBy: [DashOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DashWhereUniqueInput): [Dash!]
  dashesCount(where: DashWhereInput! = {}): Int
}

input ZoneWhereUniqueInput {
  id: ID
}

input ZoneWhereInput {
  AND: [ZoneWhereInput!]
  OR: [ZoneWhereInput!]
  NOT: [ZoneWhereInput!]
  id: IDFilter
  name: StringFilter
  dashes: DashManyRelationFilter
}

input DashManyRelationFilter {
  every: DashWhereInput
  some: DashWhereInput
  none: DashWhereInput
}

input ZoneOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ZoneUpdateInput {
  name: String
  dashes: DashRelateToManyForUpdateInput
}

input DashRelateToManyForUpdateInput {
  disconnect: [DashWhereUniqueInput!]
  set: [DashWhereUniqueInput!]
  create: [DashCreateInput!]
  connect: [DashWhereUniqueInput!]
}

input ZoneUpdateArgs {
  where: ZoneWhereUniqueInput!
  data: ZoneUpdateInput!
}

input ZoneCreateInput {
  name: String
  dashes: DashRelateToManyForCreateInput
}

input DashRelateToManyForCreateInput {
  create: [DashCreateInput!]
  connect: [DashWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createDash(data: DashCreateInput!): Dash
  createDashes(data: [DashCreateInput!]!): [Dash]
  updateDash(where: DashWhereUniqueInput!, data: DashUpdateInput!): Dash
  updateDashes(data: [DashUpdateArgs!]!): [Dash]
  deleteDash(where: DashWhereUniqueInput!): Dash
  deleteDashes(where: [DashWhereUniqueInput!]!): [Dash]
  createZone(data: ZoneCreateInput!): Zone
  createZones(data: [ZoneCreateInput!]!): [Zone]
  updateZone(where: ZoneWhereUniqueInput!, data: ZoneUpdateInput!): Zone
  updateZones(data: [ZoneUpdateArgs!]!): [Zone]
  deleteZone(where: ZoneWhereUniqueInput!): Zone
  deleteZones(where: [ZoneWhereUniqueInput!]!): [Zone]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  dashes(where: DashWhereInput! = {}, orderBy: [DashOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DashWhereUniqueInput): [Dash!]
  dash(where: DashWhereUniqueInput!): Dash
  dashesCount(where: DashWhereInput! = {}): Int
  zones(where: ZoneWhereInput! = {}, orderBy: [ZoneOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ZoneWhereUniqueInput): [Zone!]
  zone(where: ZoneWhereUniqueInput!): Zone
  zonesCount(where: ZoneWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
